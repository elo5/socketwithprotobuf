// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: socketwithprotobuf.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Socketwithprotobuf.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SocketwithprotobufRoot

@implementation SocketwithprotobufRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - SocketwithprotobufRoot_FileDescriptor

static GPBFileDescriptor *SocketwithprotobufRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Enum _em_server_message

GPBEnumDescriptor *_em_server_message_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "WsMsgServerLoginResp\000WsMsgServerLoginNot"
        "ify\000WsMsgServerChatResp\000WsMsgServerChatN"
        "otify\000";
    static const int32_t values[] = {
        _em_server_message_WsMsgServerLoginResp,
        _em_server_message_WsMsgServerLoginNotify,
        _em_server_message_WsMsgServerChatResp,
        _em_server_message_WsMsgServerChatNotify,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(_em_server_message)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:_em_server_message_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL _em_server_message_IsValidValue(int32_t value__) {
  switch (value__) {
    case _em_server_message_WsMsgServerLoginResp:
    case _em_server_message_WsMsgServerLoginNotify:
    case _em_server_message_WsMsgServerChatResp:
    case _em_server_message_WsMsgServerChatNotify:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum _em_client_message

GPBEnumDescriptor *_em_client_message_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "WsMsgClientLoginReq\000WsMsgClientChatReq\000";
    static const int32_t values[] = {
        _em_client_message_WsMsgClientLoginReq,
        _em_client_message_WsMsgClientChatReq,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(_em_client_message)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:_em_client_message_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL _em_client_message_IsValidValue(int32_t value__) {
  switch (value__) {
    case _em_client_message_WsMsgClientLoginReq:
    case _em_client_message_WsMsgClientChatReq:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum _en_error_type

GPBEnumDescriptor *_en_error_type_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "LoginSuccess\000LoginFailedWrongPass\000ChatSu"
        "ccess\000";
    static const int32_t values[] = {
        _en_error_type_LoginSuccess,
        _en_error_type_LoginFailedWrongPass,
        _en_error_type_ChatSuccess,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(_en_error_type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:_en_error_type_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL _en_error_type_IsValidValue(int32_t value__) {
  switch (value__) {
    case _en_error_type_LoginSuccess:
    case _en_error_type_LoginFailedWrongPass:
    case _en_error_type_ChatSuccess:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - _msg_login_req

@implementation _msg_login_req

@dynamic hasUserId, userId;
@dynamic hasUserPass, userPass;

typedef struct _msg_login_req__storage_ {
  uint32_t _has_storage_[1];
  int32_t userId;
  NSString *userPass;
} _msg_login_req__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = _msg_login_req_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(_msg_login_req__storage_, userId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "userPass",
        .dataTypeSpecific.className = NULL,
        .number = _msg_login_req_FieldNumber_UserPass,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(_msg_login_req__storage_, userPass),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[_msg_login_req class]
                                     rootClass:[SocketwithprotobufRoot class]
                                          file:SocketwithprotobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(_msg_login_req__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - _msg_login_resp

@implementation _msg_login_resp

@dynamic hasErrorCode, errorCode;

typedef struct _msg_login_resp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
} _msg_login_resp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.className = NULL,
        .number = _msg_login_resp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(_msg_login_resp__storage_, errorCode),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[_msg_login_resp class]
                                     rootClass:[SocketwithprotobufRoot class]
                                          file:SocketwithprotobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(_msg_login_resp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - _msg_login_notify

@implementation _msg_login_notify

@dynamic hasUserId, userId;

typedef struct _msg_login_notify__storage_ {
  uint32_t _has_storage_[1];
  int32_t userId;
} _msg_login_notify__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = _msg_login_notify_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(_msg_login_notify__storage_, userId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[_msg_login_notify class]
                                     rootClass:[SocketwithprotobufRoot class]
                                          file:SocketwithprotobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(_msg_login_notify__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - _msg_chat_req

@implementation _msg_chat_req

@dynamic hasUserId, userId;
@dynamic hasChatContent, chatContent;

typedef struct _msg_chat_req__storage_ {
  uint32_t _has_storage_[1];
  int32_t userId;
  NSString *chatContent;
} _msg_chat_req__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = _msg_chat_req_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(_msg_chat_req__storage_, userId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chatContent",
        .dataTypeSpecific.className = NULL,
        .number = _msg_chat_req_FieldNumber_ChatContent,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(_msg_chat_req__storage_, chatContent),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[_msg_chat_req class]
                                     rootClass:[SocketwithprotobufRoot class]
                                          file:SocketwithprotobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(_msg_chat_req__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - _msg_chat_resp

@implementation _msg_chat_resp

@dynamic hasErrorCode, errorCode;

typedef struct _msg_chat_resp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
} _msg_chat_resp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.className = NULL,
        .number = _msg_chat_resp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(_msg_chat_resp__storage_, errorCode),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[_msg_chat_resp class]
                                     rootClass:[SocketwithprotobufRoot class]
                                          file:SocketwithprotobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(_msg_chat_resp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - _msg_chat_notify

@implementation _msg_chat_notify

@dynamic hasUserId, userId;
@dynamic hasChatContent, chatContent;

typedef struct _msg_chat_notify__storage_ {
  uint32_t _has_storage_[1];
  int32_t userId;
  NSString *chatContent;
} _msg_chat_notify__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = _msg_chat_notify_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(_msg_chat_notify__storage_, userId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chatContent",
        .dataTypeSpecific.className = NULL,
        .number = _msg_chat_notify_FieldNumber_ChatContent,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(_msg_chat_notify__storage_, chatContent),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[_msg_chat_notify class]
                                     rootClass:[SocketwithprotobufRoot class]
                                          file:SocketwithprotobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(_msg_chat_notify__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
